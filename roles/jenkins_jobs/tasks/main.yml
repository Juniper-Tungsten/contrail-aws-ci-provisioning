---
- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -u admin:{{ jenkins_passwd }} -D - --silent http://localhost:8080/cli/"
  register: result
  until: (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 10
  delay: 10
  changed_when: false

# - name: login
#   command: java -jar "{{ jenkins_jar_location }}" -s http://localhost:8080 login --username admin --password "{{ jenkins_passwd }}"

- name: Configure github plugin
  command: curl -u "admin:{{ jenkins_passwd }}" --data-urlencode "script={{ github_plugin_config_script | replace('\"', '\\\"') }}" http://localhost:8080/scriptText
  register: github_plugin_cmd

- assert:
    that:
      - github_plugin_cmd.stdout == ""

- name: Copy job definitions
  copy: src="{{ item }}.xml" dest="{{ job_config_tmp }}"
  with_items:
    - container-networking-ansible
    - contrail-kubernetes

- name: list jobs
  command: java -jar {{ jenkins_jar_location }} -s http://localhost:8080 -i /var/lib/jenkins/jenkins.key list-jobs
  register: job_list

- name: create job
  shell: "cat {{ job_config_tmp }}/{{ item }}.xml | java -jar {{ jenkins_jar_location }} -s http://localhost:8080 -i /var/lib/jenkins/jenkins.key create-job {{ item }}"
  register: create_job
  with_items:
    - container-networking-ansible
    - contrail-kubernetes
  when: "'{{ item }}' not in job_list.stdout_lines"

- name: update container-networking-ansible job
  shell: "cat {{ job_config_tmp }}/{{ item }}.xml | java -jar {{ jenkins_jar_location }} -s http://localhost:8080 -i /var/lib/jenkins/jenkins.key update-job {{ item }}"
  register: update_job
  with_items:
    - container-networking-ansible
    - contrail-kubernetes
  when: "'{{ item }}' in job_list.stdout_lines"

